package com.driveventures.daos.impl;

import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import com.driveventures.daos.UsuarioDAO;
import com.driveventures.model.Usuario;

import DBCUtils.DBUtils;
import DBCUtils.DataException;
import DBCUtils.PasswordEncryptionUtil;

public class UsuarioDAOImpl implements UsuarioDAO {

	private static Logger logger = LogManager.getLogger(UsuarioDAOImpl.class);

	public UsuarioDAOImpl() {

	}


	public Usuario findByEmail(Connection connection, String email) throws DataException {

		

		Usuario u = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try{

			String sql;
			sql =    "SELECT ID, EMAIL, NOMBRE, APELLIDO, PASSWORD "
					+" FROM USUARIO "
					+" WHERE "
					+"	UPPER(EMAIL) LIKE ?";


			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setString(i++, "%"+email.toUpperCase()+"%");

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			if (resultSet.next()) {
				u =  loadNext(connection, resultSet);			

			} 

			return u;

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			DBUtils.closeResultSet(resultSet);
			DBUtils.closeStatement(preparedStatement);
		}
	}

	public Usuario findById(int id) throws DataException {

		Usuario result= null;
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {

			conn = DBCUtils.GetConnection.getConnection();

			logger.debug("Creating statement...");
			stmt = conn.createStatement();
			String sql;
			sql = "SELECT nombre , email, apellido "
					+" FROM usuario"
					+" WHERE id = " +id;

			ResultSet rsl = stmt.executeQuery(sql);

			if (rsl.next()) {			
				result = loadNext(conn, rs);			
			}
			rsl.close();
			stmt.close();
			conn.close();
		} catch (SQLException se) {
			logger.error(se);
		} catch (Exception e) {
			logger.error(e);
		} finally {

			DBUtils.closeConnection(conn);
			DBUtils.closeStatement(stmt);
			DBUtils.closeResultSet(rs);
		}

		return result;
	}

	
	public Usuario create(Connection connection, Usuario u) throws DataException{

		/**if(logger.isDebugEnabled()) {
			logger.info("Usuario: id:{}, nome:{}, email:{}, apelidos:{}"
					,u.getId(), u.getNombre(), u.getEmail(), u.getApellidos(), 
					 (u.getPassword()==null));
		}**/

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          

			String queryString = "INSERT INTO USUARIO(EMAIL,NOMBRE,APELLIDO,PASSWORD)"
					+ "VALUES (?, ?, ?, ?)";

			preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS);

			int i = 1;     			
			preparedStatement.setString(i++, u.getEmail());
			preparedStatement.setString(i++, u.getNombre());
			preparedStatement.setString(i++, u.getApellidos());
			preparedStatement.setString(i++, PasswordEncryptionUtil.encryptPassword(u.getPassword()));

			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Usuarios'");
			}

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long id = resultSet.getLong(1);
				u.setId(id);

			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}


			return u;					

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {
			DBUtils.closeResultSet(resultSet);
			DBUtils.closeStatement(preparedStatement);			
		}

	}

	@Override
	public void update(Connection connection, Usuario u) throws DataException {

		PreparedStatement preparedStatement = null;
		StringBuilder queryString = null;
		try {          

			queryString = new StringBuilder(
					" UPDATE USUARIO" 
					);

			boolean first = true;

			if (u.getEmail()!=null) {
				addUpdate(queryString, first, " EMAIL = ? ");
				first = false;
			}
			
			if (u.getNombre()!=null) {
				addUpdate(queryString, first, " NOMBRE = ? ");
				first = false;
			}
			
			if (u.getApellidos()!=null) {
				addUpdate(queryString, first, " APELLIDO = ? ");
				first = false;
			}
			
			if (u.getPassword()!=null) {
				addUpdate(queryString, first, " PASSWORD = ? ");
				first = false;
			}
			
			
			
			
				queryString.append(" WHERE ID= ? ");

			preparedStatement = connection.prepareStatement(queryString.toString());

			int i = 1;     		
			if(u.getEmail()!=null)
					preparedStatement.setString(i++, u.getEmail());
			
			if(u.getNombre()!=null)
					preparedStatement.setString(i++, u.getNombre());
			
			if(u.getApellidos()!=null)
					preparedStatement.setString(i++, u.getApellidos());
			
			if(u.getPassword()!=null)
					preparedStatement.setString(i++,PasswordEncryptionUtil.encryptPassword(u.getPassword()));

			
					preparedStatement.setLong(i++, u.getId());


			int updatedRows = preparedStatement.executeUpdate();

			if (updatedRows == 0) {
				throw new DataException("No se ha encontrado al usuario "+u.getId());
			}

			if (updatedRows > 1) {
				throw new SQLException("Duplicate row for id = '" + u.getId() + "' in table 'Usuario'");
			}



		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {
			DBUtils.closeStatement(preparedStatement);			
		}


	}
	
	private void addUpdate(StringBuilder queryString, boolean first, String clause) {
		queryString.append(first?" SET ": " , ").append(clause);
	}

	private Usuario loadNext(Connection connection, ResultSet rs) throws SQLException {
		Usuario u = new Usuario();
		int i = 1;
		u.setNombre(rs.getString(i++));
		u.setApellidos(rs.getString(i++));
		u.setEmail(rs.getString(i++));
		return u;


	}

}
